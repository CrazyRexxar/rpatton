"use client"
import Link from "next/link";
import React, { useRef } from "react";
import { useEffect, useState } from "react";
import Image from "next/image";
import { useInView } from "react-intersection-observer";
import { RxExternalLink } from "react-icons/rx";

const AllProjects = ({title, type, desc, desc2, splashImages}) => {

    const [scrollY, setScrollY] = useState(0); //used to track current project in view
    const [isVis, setVis] = useState(true);    //used to track if a project or splash page is in view 
    const [layoutMode, setLayoutMode] = useState("full");

    useEffect(()=> {
        if (window.innerWidth > 750) {
            setLayoutMode("full")
        } else {
            setLayoutMode("list")
        }
        window.addEventListener("resize", windowResize)
    }, [])

    function windowResize() {
        if (window.innerWidth > 750) {
            setLayoutMode("full")
        } else {
            setLayoutMode("list")
        }
    }

    //project info to display on left
    var projectInfo = [
        {
            name: title,
            desc: desc,
            desc2: desc2,
            link: "none",
            anim: "projectText",
            typeOf: "splash"
        },
        {
            name: "Search Map",
            desc: "Leverages Google's Maps API and cloud services to enable users to search for places by name, type and location. This data can then be filtered, saved to the cloud or exported for personal use.",
            desc2: "I created this tool to automate the online targeting of potential wholesale customers for a business I supported during the COVID Lockdown. I was able to save over 100+ Hrs of time compared to manually searching Google Maps.",
            link: "#dissertation",
            anim: "projectText2",
            typeOf: "tech"
        },
        {
            name: "Dissertation",
            desc: "Consulted with medical firm Eventum Orthopaedics to investigate and validate the performance of a novel medical hardware. Included research into the field, applicable standards, design of experiments and verification and validation work. ",
            link: "#turbine",
            anim: "projectText",
            typeOf: "uol"
        },
        {
            name: "Turbine Project",
            desc: "Constructed models from first principles to optimised the power generated by a water powered turbine. Given a head pressure curve, I found the optimal nozzle geometry, bucket design and gearbox to maximise the system efficiency.",
            desc2: "I used MATLAB to solve the system of equations that described the optimal nozzle and speed ratios, and then used SIMULINK to simulate the transient response of the system. This project sparked my interest in renewable energy solutions",
            link: "#turbine",
            anim: "projectText",
            typeOf: "uol"
        },
        {
            name: "FEA Sandbox",
            desc: "Browser based playground. Construct 2D node element models, apply forces, boundary conditions, and calculate the structure's response. Constructs intermediate matrices to help students visualise the finite element method.",
            desc2: "Developed this project after studying the FE method at university. I wanted to create a graphical user interface to help illustrate how the various matrices required to solve FE problems are created, and to link this to the structure described.",
            link: "#feasandbox",
            anim: "projectText2",
            typeOf: "tech"
        },
        {
            name: "Daring Dash",
            desc: "Led a team that designed and manufactured an autonomous buggy. Optimised the vehicles suspension response using Matlab to evaluate a kinematic model constructed from 1st Principles.",
            desc2: "Chaired regular meetings to share progress and assign next steps. Our buggy was one of the top performing teams. This project has prompted my further interest and research into suspension and control systems.",
            link: "#daringdash",
            anim: "projectText",
            typeOf: "uol"
        },
        {
            name: "Volunteering",
            desc: "Traveled to Tanzania to participate in several aid projects, including Civil Engineering work redirecting rainwater around a local school, refurbishing desks and working with children",
            link: "#volunteering",
            anim: "projectText2",
            typeOf: "other"
        },
        {
            name: "Truss Bridge",
            desc: "Developed a MATLAB program with GUI to analyse the stresses of a truss bridge. The user can enter compression and tension failure loads for each member type, apply loads and generate a graphic illustrating stresses",
            desc2: "This project was based on a first year coursework that I extended to include a graphical user interface and generate a diagram with stress, colour coded to aid interpretation.",
            link: "#trussbridge",
            anim: "projectText",
            typeOf: "uol"
        },
        {
            name: "McLaren F1",
            desc: "Individual research project into the McLaren F1 sports car. Generated estimations of the car's key characteristics from data available online to predict top speed, acceleration times, cornering performance and braking distance.",
            desc2: "Increased the accuracy of predictions by increasing the model complexity. I developed a gear-change system in SIMULINK to simulate the impact of gear changes on the transient response - received extra credit for this unique approach.",
            link: "#mcf1",
            anim: "projectText2",
            typeOf: "uol"
        },
        {
            name: "Stabiliser Analysis",
            desc: "Finite element study of a Robinson R22 helicopter horizontal stabiliser, evaluating the design response under specific flight conditions. Constructed several models of increasing complexity, conducting sensitivity and structural analysis.",
            desc2: "Revised the simulation to model the stabiliser as a composite construction. Used my Python programming skills to optimise the wings response by automatically varying layer ply direction, then running and selecting the best performing configuration.",
            link: "#wing",
            anim: "projectText",
            typeOf: "uol"
        },
        {
            name: "Games",
            desc: "I first started learning to code at age 12 when I got my first Raspberry PI. Over the next few years, I would develop some simple games, either using the Unity engine, or sometimes creating my own architecture in Java.",
            desc2: "Creating these projects developed my problem solving skills and creativity. Often I would emulate games I enjoyed playing, extending them by adding features and functionality. I have translated these skills to my studies and career, extending projects, or finding new creative solutions.",
            link: "#games",
            anim: "projectText2",
            typeOf: "tech"
        },
        {
            name: "Apps",
            desc: "Part of my journey learning to code included producing some basic apps that are available on the Google Play Store. To create these I used tools such as Unity, and Android Studio, powered by C# and Java. ",
            desc2: "",
            link: "#games",
            anim: "projectText2",
            typeOf: "tech"
        },
        {
            name: "Raspberry Pi",
            desc: "I first started learning to code at age 12 when I got my first Raspberry PI. Over the next few years, I would develop some simple games, either using the Unity engine, or sometimes creating my own architecture in Java.",
            desc2: "Creating these projects developed my problem solving skills and creativity. Often I would emulate games I enjoyed playing, extending them by adding features and functionality. I have translated these skills to my studies and career, extending projects, or finding new creative solutions.",
            link: "#pi",
            anim: "projectText1",
            typeOf: "tech"
        },
    ]

    var projectBullets = [
        {text1: "", text2: "", text3: "", extLink: ""},
        {text1: "Built using HTML, CSS, JS", text2: "Powered by React, Firebase, Google APIs", text3: "Responsive design", extLink: "https://searchmap.web.app/"},
        {text1: "Successful collaboration", text2: "Applied problem solving and data analysis skills to synthesize conclusions", text3: "Sparked an interest in the Medical Engineering field", extLink: "https://searchmap.web.app/"},
        {text1: "Analysis driven solution", text2: "Extended project brief to include transient response", text3: "Project recieved a 1st", extLink: ""},
        {text1: "Designed as an Educational tool", text2: "First in a family of Engineering visualisation tools I am working on", text3: "Open source, free to use", extLink: "/fea/index.html"},
        {text1: "Computer aided, analysis led design.", text2: "Project managed team.", text3: "Achieved 86% in this coursework.", extLink: "/cv#daringdash"},
        {text1: "Fund raised over 2 years", text2: "Collaborated with a diverse team", text3: "Harboured a love for travel", extLink: ""},
        {text1: "Complex MATLAB project", text2: "Creative data visualisation", text3: "Project extended beyond brief", extLink: ""},
        {text1: "Estimation of system performance", text2: "Techniques have real world application", text3: "Earned 71% for this report", extLink: ""},
        {text1: "Detailed FEA study", text2: "Increased efficiency using Python", text3: "Credited for utilising a creative problem solving method", extLink: ""},
        {text1: "C#, C++, Java, Python, Android", text2: "Developed problem solving skills", text3: "Springboard to apply computational methods to solve engineering problems", extLink: ""},
        {text1: "Mobile development experience", text2: "Integration of C and Java", text3: "Cross-platform application", extLink: ""},
        {text1: "C#, C++, Java, Python, Android", text2: "Developed problem solving skills", text3: "Springboard to apply computational methods to solve engineering problems", extLink: ""},
    ]

    var imageStyle = {
        width: '100%',
        height: 'auto'
      }
    
    //image info for right pane
    var imagesInfo = [
        {
            link: "splash",
            images: splashImages,
        },
        {
            link: "searchmap",
            images: [{src: "/searchmap1.png", h:1456, w:892},
                     {src: "/searchmap2.png", h:862, w:862},
                     {src: "/searchmap3.png", h:529, w:529}]
        },
        {
            link: "dissertation",
            images: [{src: "/uol/dis1.png", h:454, w:908},
                     {src: "/uol/dis2.png", h:553, w:553},
                     {src: "/uol/dis3.png", h:424, w:424}]
        },
        {
            link: "turbine",
            images: [{src: "/uol/turbine1.png", h:454, w:908},
                     {src: "/uol/turbine2.png", h:553, w:553},
                     {src: "/uol/turbine3.png", h:424, w:424},
                     {src: "/uol/turbine4.png", h:231, w:738}]
        },
        {
            link: "feasandbox",
            images: [{src: "/fea/fea1.png", h:1218, w:688},
                     {src: "/fea/fea2.png", h:560, w:600},
                     {src: "/fea/fea3.png", h:826, w:826}]
        },
        {
            link: "daringdash",
            images: [{src: "/buggy/buggy1.png", h:251, w:521},
                     {src: "/buggy/buggy2.png", h:370, w:370},
                     {src: "/buggy/buggy3.png", h:1340, w:1340},
                     {src: "/buggy/buggy4.png", h:260, w:723}]
        },
        {
            link: "volunteering",
            images: [{src: "/tanzania/tanzania3.png", h:1062, w:681},
                     {src: "/tanzania/tanzania1.png", h:654, w:654},
                     {src: "/tanzania/tanzania2.png", h:654, w:654}]
        },
        {
            link: "trussbridge",
            images: [{src: "/uol/bridge1.png", h:1164, w:769},
                     {src: "/uol/bridge2.png", h:748, w:748},
                     {src: "/uol/bridge3.png", h:672, w:672}]
        },
        {
            link: "mcf1",
            images: [{src: "/uol/mcf4.jpg", h:399, w:965},
                     {src: "/uol/mcf2.png", h:548, w:548},
                     {src: "/uol/mcf3.png", h:404, w:404},
                     {src: "/uol/mcf1.png", h:351, w:901}]
        },
        {
            link: "wing",
            images: [{src: "/uol/wing4.png", h:390, w:602},
                     {src: "/uol/wing2.png", h:448, w:448},
                     {src: "/uol/wing3.png", h:675, w:675},
                     {src: "/uol/wing1.png", h:240, w:678}]
        },
        {
            link: "games",
            images: [{src: "/tech/games1.png", h:390, w:602},
                     {src: "/tech/games2.png", h:448, w:448},
                     {src: "/tech/games3.png", h:675, w:675},
                     {src: "/tech/games5.png", h:240, w:678}]
        },
        {
            link: "apps",
            images: [{src: "/tech/apps1.png", h:390, w:602},
                     {src: "/tech/apps2.png", h:448, w:448},
                     {src: "/tech/apps3.png", h:675, w:675}]
        },
        {
            link: "pi",
            images: [{src: "/tech/pi1.jpg", h:390, w:602},
                     {src: "/tech/pi2.png", h:448, w:448},
                     {src: "/tech/pi3.png", h:675, w:675},
                     {src: "/tech/pi4.png", h:240, w:678}]
        }
    ]

    //set the current project window when images info changes - triggered by inViewEffect
    useEffect(()=> {
        var i = 0;
        var vis = false;
        for (let index = 0; index < imagesInfo.length; index++) {
            if (imagesInfo[index].isVisible) {
                i = index;
                vis = true;
                break;
            }
        }

        setScrollY(i)
        setVis(vis)
    }, [imagesInfo])

    //assign a ref and in view hook for each image card in imageInfo
    imagesInfo.forEach(prj => {
        var {ref, inView } = useInView({threshold: 0.3})
        prj.prjRef = ref
        prj.isVisible = inView
    });

    var [pageBorder, borderInView] = useInView({threshold:1})
    const [ready, setShow] = useState(false);
    useEffect(() => {
        setShow(true)
    })


    //filter projects
    if (type != "all") {
        var newProjectInfo = []
        var newImages = []
        var newBullets = []
        
        if (type == "tech") {
            for (let index = 0; index < projectInfo.length; index++) {
                if (projectInfo[index].typeOf == "tech" || projectInfo[index].typeOf == "splash") {
                    newProjectInfo.push(projectInfo[index]) 
                    newImages.push(imagesInfo[index])
                    newBullets.push(projectBullets[index])
                }
            }
        }
        if (type == "uol") {
            for (let index = 0; index < projectInfo.length; index++) {
                if (projectInfo[index].typeOf == "uol" || projectInfo[index].typeOf == "splash") {
                    newProjectInfo.push(projectInfo[index]) 
                    newImages.push(imagesInfo[index])
                    newBullets.push(projectBullets[index])
                }
            }
        }
        if (type == "other") {
            for (let index = 0; index < projectInfo.length; index++) {
                if (projectInfo[index].typeOf == "other" || projectInfo[index].typeOf == "splash") {
                    newProjectInfo.push(projectInfo[index]) 
                    newImages.push(imagesInfo[index])
                    newBullets.push(projectBullets[index])
                }
            }
        }
        if (newProjectInfo.length == 2) { //remove overview if only 1 card
            newProjectInfo.splice(0,1)
            newImages.splice(0,1)
            newBullets.splice(0,1)
        }
        projectInfo = newProjectInfo
        imagesInfo = newImages
        projectBullets = newBullets
    } else {
        projectInfo.forEach(project => {
            project.desc2 = ""
        });
    }

    return ((ready) ? 
    <div className="md:grid md:grid-cols-2"> {(layoutMode=="full") ? <>
        <div ref={pageBorder} className="h-8"></div> 
        <div className="col-start-1 col-span-1 hidden sm:block " >
            <div className={`xl:pl-8 lg:pl-0 md:pl-4 ${(borderInView)? "" : "md:fixed top-10 "} ${isVis? "" : "hidden"} xl:max-w-md lg:max-w-sm lg:pr-6 md:pr-8 md:max-w-sm`}>
            <h1 className={` xl:text-4xl md:text-4xl   font-bold tracking-tight text-gray-900 dark:text-gray-200 ${(scrollY<1)? projectInfo[scrollY].anim : ""}`}>{projectInfo[scrollY].name}</h1>
            <p className={`${projectInfo[scrollY].anim} mt-2 ml-1 text-md leading-8 text-gray-600 dark:text-gray-200`}>{projectInfo[scrollY].desc}</p>
            <p className={`${projectInfo[scrollY].anim} mt-2 ml-1 text-md leading-8 text-gray-600 dark:text-gray-200`}>{projectInfo[scrollY].desc2}</p>
            {(projectBullets[scrollY].text1 != "") ? 
            <><ul className={`${projectInfo[scrollY].anim} transition-all md:mt-4 ml-8 list-disc `}>
                <li className="text-md xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[scrollY].text1}</li>
                <li className="text-md xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[scrollY].text2}</li>
                <li className="text-md xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[scrollY].text3}</li>
            </ul>
            <button href={projectBullets[scrollY].extLink}  className={` mt-6 z-50 ml-2 pl-4 pr-4 pt-2 pb-2 outline outline-1 outline-blue-500 rounded-lg flex text-xl font-bold dark:text-gray-300 dark:outline-indigo-600 text-blue-700 drop-shadow-2xl`}>
                <Link href={projectBullets[scrollY].extLink}> Check it out</Link> <RxExternalLink className="projectButton animate-pulse mt-1 ml-2" /></button>
            </>
            : <></>}
            <ul className={`flex transition-all flex-wrap mt-4 `}> 
            {[...projectInfo].splice(1).map(({ name, link }, index) => (  //remove first spalsh page, then add links,  //${(scrollY < 1)? "projectText": "hidden xl:flex"}  above
                <li key={index} className={`${(scrollY==(index+1))? "shadow-xl dark:ring-indigo-600" : ""} rounded-full transition-all ml-1 mr-1 mt-3 mb-1 px-3 py-1 text-sm leading-6 text-gray-600 ring-1 ring-gray-900/10 hover:ring-gray-900/20 dark:ring-gray-500 dark:hover:dark:bg-gray-900`}>
                <a href={link} className="font-semibold text-blue-600 dark:text-gray-400">{name}  </a>
                </li> 
            ))}
            </ul>
            </div>
        </div>

        <div className="md:col-start-2 md:col-span-1 md:block hidden">
            {imagesInfo.map(({ images, prjRef, isVisible, link }, index) => (
            <div ref={prjRef} id={link} key={index} 
                className={`p-4 pt-8 transition-all mb-20
                ${(isVisible && (index>0))?         //if visible and not first card, check card above then render, else render if visible
                    (imagesInfo[index-1].isVisible)? "" : "md:shadow-xl md:scale-105 md:-translate-x-3 lg:translate-x-0  " 
                : (isVisible)? "md:shadow-xl" : ""}`}> 

            <Image unoptimized={true} src={images[0].src} style={imageStyle} width={images[0].w} height={images[0].h} alt="todo"/>
            <div className="grid grid-cols-2">
                <div className="col-start-1 col-span-1">
                    <Image src={images[1].src} style={imageStyle} width={images[1].w} height={images[1].h} alt="todo"/></div>
                <div className="col-start-2 col-span-1">
                    <Image src={images[2].src} style={imageStyle} width={images[2].w} height={images[2].h} alt="todo"/></div>
            </div>
            {((images.length>3) && (type!="all"))? 
            <Image unoptimized={true} src={images[3].src} style={imageStyle} width={images[3].w} height={images[3].h} alt="todo"/> : <></>}
            </div>
            
            ))}

            <div className="md:h-28 lg:h-72"></div>
        </div>



        </> :
        <div className="block md:hidden">
            {projectInfo.map(({name,desc,desc2},index)=> (<div key={index}>
            <div id={imagesInfo[index].link}  className="col-start-1 col-span-1 sm:p-6 p-1 mt-8" >
                <div>
                <h1 className="ml-3 text-5xl font-bold tracking-tight text-gray-900 dark:text-gray-200">{name}</h1>
                <p className="mt-4 ml-3 text-lg leading-8 text-gray-600 dark:text-gray-200">{desc}</p>
                <p className="mt-4 ml-3 text-lg leading-8 text-gray-600 dark:text-gray-200">{desc2}</p>
                {(projectBullets[index].text1 != "")? <>
                <ul className="pt-4 transition-all md:mt-4 ml-8 list-disc ">
                    <li className="text-lg xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[index].text1}</li>
                    <li className="text-lg xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[index].text2}</li>
                    <li className="text-lg xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[index].text3}</li>
                </ul>
                <button href={projectBullets[index].extLink}  className="mt-6 z-50 ml-4 pl-4 pr-4 pt-2 pb-2 outline outline-1 outline-blue-500 rounded-lg flex text-xl font-bold dark:text-gray-300 dark:outline-indigo-600 text-blue-700 drop-shadow-2xl">
                    <Link href={projectBullets[index].extLink}> Check it out</Link> <RxExternalLink className="projectButton animate-pulse mt-1 ml-2" /></button>
                </>:
                <ul className="flex flex-wrap transition-all md:fixed xl:mt-64 lg:mt-64 md:mt-72 xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none ml-2">  
                    {[...projectInfo].splice(1).map(({ name, link }, index) => (  //remove first spalsh page, then add links
                        <li key={index} className={`${(scrollY==(index+1))? "shadow-xl dark:ring-indigo-600" : ""} rounded-full transition-all ml-1 mr-1 mt-3 mb-1 px-3 py-1 text-sm leading-6 text-gray-600 ring-1 ring-gray-900/10 hover:ring-gray-900/20 dark:ring-gray-500 dark:hover:dark:bg-gray-900`}>
                        <a href={link} className="font-semibold text-blue-600 dark:text-gray-400">{name}  </a>
                        </li> 
                    ))}</ul>
                }
                </div>
            </div>
            <div  className={`p-4`}>
                <Image unoptimized={true} src={imagesInfo[index].images[0].src} style={imageStyle} width={imagesInfo[index].images[0].w} height={imagesInfo[index].images[0].h} alt="todo" className="sm:hidden"/>
            <div className="grid grid-cols-2">
                <div className="col-start-1 col-span-1">
                    <Image src={imagesInfo[index].images[1].src} style={imageStyle} width={imagesInfo[index].images[1].w} height={imagesInfo[index].images[1].h} alt="todo"/></div>
                <div className="col-start-2 col-span-1">
                    <Image src={imagesInfo[index].images[2].src} style={imageStyle} width={imagesInfo[index].images[2].w} height={imagesInfo[index].images[2].h} alt="todo"/></div>
                </div>
            </div>
            </div>))}
        </div>}
    </div>
    :<></>)
}

export default AllProjects;

/*
(ready) ? 
        <div className="md:grid md:grid-cols-2"><div ref={pageBorder} className="h-8"></div> 
        <div className="col-start-1 col-span-1 p-6 transition-all hidden sm:block" >
            <h1 className={`text-4xl ml-3 md:mt-10 lg:mt-12 transition-all ${(borderInView)? "" : "md:fixed top-10 "} ${isVis? "" : "hidden"} font-bold tracking-tight text-gray-900 sm:text-6xl md:max-w-xs xl:max-w-none md:pr-12 pr-0  sm:max-w-none dark:text-gray-200`}>{projectInfo[scrollY].name}</h1>
            <p className={` mt-4 ml-3 mb-4 text-lg ${(borderInView)? "" : "md:fixed md:top-52 md:mt-0 xl:top-40 lg:top-54 lg:pt-3 xl:pt-2"} ${isVis? "" : "hidden"} xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none leading-8 text-gray-600 dark:text-gray-200`}>{projectInfo[scrollY].desc}</p>
            {(projectBullets[scrollY].text1 != "") ? <>
            <ul className={` transition-all xl:mt-2 lg:mt-10 md:mt-6 ml-8 list-disc  ${(borderInView)? "" : "md:fixed md:top-96 xl:top-64 lg:top-80 lg:pt-8 xl:pt-12"}  ${isVis? "" : "hidden"}  xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none`}>
                <li className="text-lg xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[scrollY].text1}</li>
                <li className="text-lg xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[scrollY].text2}</li>
                <li className="text-lg xl:mb-1 text-gray-700 dark:text-gray-200">{projectBullets[scrollY].text3}</li>
            </ul>
            <button href={projectBullets[scrollY].extLink}  className={` z-50 xl:mt-44 lg:mt-52 md:mt-36 ml-4 pl-4 pr-4 pt-2 pb-2 outline outline-1 outline-blue-500 rounded-lg  ${(borderInView)? "" : "md:fixed md:top-96 xl:top-64 lg:top-80 "}  ${isVis? "" : "hidden"} flex text-xl font-bold dark:text-blue-500 text-blue-700 drop-shadow-2xl`}>
                <Link href={projectBullets[scrollY].extLink}> Check it out</Link> <RxExternalLink className="mt-1 ml-2" /></button>
            </>
            : <></>}
            {(scrollY < 1) ?
            <ul className={`flex flex-wrap ${(borderInView)? "" : "md:fixed md:top-96 xl:top-64 lg:top-80 lg:pt-8 xl:pt-12"}  ${isVis? "" : "hidden"}  xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none
                                            ${(projectBullets[scrollY].text1 != "")? "xl:mt-28 lg:mt-32 md:mt-24 md:ml-2 md:pt-2" : ""}`}>
            {projectInfo.splice(1).map(({ name, link }, index) => (  //remove first spalsh page, then add links
                <li key={index} className={`${(scrollY==(index+1))? "shadow-xl dark:ring-gray-300" : ""} rounded-full transition-all ml-1 mr-1 mt-3 mb-1 px-3 py-1 text-sm leading-6 text-gray-600 ring-1 ring-gray-900/10 hover:ring-gray-900/20 dark:ring-gray-500 dark:hover:dark:bg-gray-900`}>
                <a href={link} className="font-semibold text-indigo-600">{name}  </a>
                </li> 
            ))}
            </ul>
            :
            <ul className={`hidden xl:flex flex-wrap ${(borderInView)? "" : "md:fixed md:top-96 xl:top-64 lg:top-80 lg:pt-8 xl:pt-12"}  ${isVis? "" : "hidden"}  xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none
                                            ${(projectBullets[scrollY].text1 != "")? "xl:mt-48 lg:mt-32 md:mt-24 md:ml-2 md:pt-2" : ""}`}>
            {projectInfo.splice(1).map(({ name, link }, index) => (  //remove first spalsh page, then add links
                <li key={index} className={`${(scrollY==(index+1))? "shadow-xl dark:bg-gray-900" : ""} rounded-full transition-all ml-1 mr-1 mt-3 mb-1 px-3 py-1 text-sm leading-6 text-gray-600 ring-1 ring-gray-900/10 hover:ring-gray-900/20 dark:hover:dark:bg-gray-900 dark:ring-gray-500`}>
                <a href={link} className="font-semibold text-indigo-600">{name}  </a>
                </li> 
            ))}
            </ul>}
        </div>

        <div className="md:col-start-2 md:col-span-1 md:block hidden">
            {imagesInfo.map(({ images, prjRef, isVisible, link }, index) => (
            <div ref={prjRef} id={link} key={index} 
                className={`p-4 pt-8 transition-all 
                ${(isVisible && (index>0))?         //if visible and not first card, check card above then render, else render if visible
                    (imagesInfo[index-1].isVisible)? "" : "md:shadow-xl md:scale-105 md:-translate-x-3 lg:translate-x-0" 
                : (isVisible)? "md:shadow-xl" : ""}`}> 

            <Image unoptimized={true} src={images[0].src} style={imageStyle} width={images[0].w} height={images[0].h} alt="todo"/>
            <div className="grid grid-cols-2">
                <div className="col-start-1 col-span-1">
                    <Image src={images[1].src} style={imageStyle} width={images[1].w} height={images[1].h} alt="todo"/></div>
                <div className="col-start-2 col-span-1">
                    <Image src={images[2].src} style={imageStyle} width={images[2].w} height={images[2].h} alt="todo"/></div>
                </div>
            </div>
            ))}

            <div className="md:h-28 lg:h-16"></div>
        </div>
        </div>
        : <></>
        */

/*
<h1 className="text-4xl ml-3 md:mt-12 lg:mt-12 md:fixed font-bold tracking-tight text-gray-900 sm:text-6xl xl:max-w-md lg:max-w-sm pr-12 md:max-w-sm sm:max-w-none">{projectInfo[scrollY].name}</h1>
<p className="md:mt-32 mt-4 ml-3 mb-4 text-lg md:fixed xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none leading-8 text-gray-600">{projectInfo[scrollY].desc}</p>
<ul className="flex flex-wrap md:fixed xl:mt-72 lg:mt-64 md:mt-72 xl:max-w-md lg:max-w-sm pr-12 md:max-w-xs sm:max-w-none">
{projectInfo.map(({ name, link }, index) => (
    <li key={index} className={`${(scrollY==index)? "shadow-xl" : ""} rounded-full ml-1 mr-1 mt-3 mb-1 px-3 py-1 text-sm leading-6 text-gray-600 ring-1 ring-gray-900/10 hover:ring-gray-900/20`}>
    <a href={link} className="font-semibold text-indigo-600">{name}  </a>
    </li>
))}
</ul>*/

/*
className={`${(isVisible && (index>0))? 
                    (imagesInfo[index-1].isVisible)? "hidden" : "" 
                    : (isVisible)? "" : "hidden"}`}*/


                    /*useEffect(() => {
        const handleScroll = () => {
            var scrollIndex = Math.round((window.scrollY-150)/(window.screen.width/3))
            if (scrollIndex < 0) {
                scrollIndex = 0
            }
            if (scrollIndex > (projectInfo.length - 2)) {
                scrollIndex = projectInfo.length - 1
            }
            setScrollY(scrollIndex);
        };

        // just trigger this so that the initial state 
        // is updated as soon as the component is mounted
        // related: https://stackoverflow.com/a/63408216
        handleScroll();

        window.addEventListener("scroll", handleScroll);
        return () => {
        window.removeEventListener("scroll", handleScroll);
        };

        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);*/